--
-- Module      : Skeleton
-- Copyright   : (c) Conrad Parker 2006
-- License     : BSD-style
-- Maintainer  : conradp@cse.unsw.edu.au
-- Stability   : experimental
-- Portability : portable

module Ogg.Skeleton (
  OggFishead (..),
  OggFisbone (..)
) where

import qualified Data.ByteString.Lazy as L
import Data.Bits
import Data.Word (Word32,Word64)
import Data.Ratio

import Text.Printf

import Ogg.ByteFields
import Ogg.Granulepos
import Ogg.Granulerate
import Ogg.Timestamp

------------------------------------------------------------
-- Data
--

data OggFishead =
  OggFishead {
    fisheadPrestime :: Timestamp,
    fisheadBasetime :: Timestamp
  }
    
data OggFisbone =
  OggFisbone {
    fisboneSerialno :: Word32,
    fisboneNHeaders :: Int,
    fisboneGranulerate :: Granulerate,
    fisboneStartgranule :: Word64,
    fisbonePreroll :: Word32,
    fisboneGranuleshift :: Int
  }


------------------------------------------------------------
-- OggSkeleton constants
--

-- fisheadIdent = 'fishead\0'
fisheadIdent :: L.ByteString
fisheadIdent = L.pack [0x66, 0x69, 0x73, 0x68, 0x65, 0x61, 0x64, 0x00]

-- fisboneIdent = 'fisbone\0'
fisboneIdent :: L.ByteString
fisboneIdent = L.pack [0x66, 0x69, 0x73, 0x62, 0x6f, 0x6e, 0x65, 0x00]

-- Skeleton major version generated by this module
vMajor :: Int
vMajor = 3

-- Skeleton minor version generated by this module
vMinor :: Int
vMinor = 0 

-- Offset to message header fields generated by this module
fisboneMHOffset :: Int
fisboneMHOffset = 44

z :: Int
z = 0

------------------------------------------------------------
-- fisheadWrite
--

fisheadWrite :: OggFishead -> L.ByteString
fisheadWrite (OggFishead p b) = newFisheadData
  where
    newFisheadData = L.concat [hData, pData, bData, uData]
    hData = L.concat [fisheadIdent, le16Fill vMajor, le16Fill vMinor]
    pData = timestampFill p
    bData = timestampFill b
    uData = L.concat $ map le64Fill [z, z]

timestampFill :: Timestamp -> L.ByteString
timestampFill (Timestamp Nothing) = L.concat $ map le64Fill [z, z]
timestampFill (Timestamp (Just (n, d))) = L.concat $ map le64Fill [n, d]


------------------------------------------------------------
-- fisboneWrite
--

fisboneWrite :: OggFisbone -> L.ByteString
fisboneWrite (OggFisbone s n (Granulerate gr) sg preroll gs) = newFisboneData
  where
    newFisboneData = L.concat [hData, fData, tData]
    hData = L.concat [fisboneIdent, le32Fill fisboneMHOffset]
    fData = L.concat [sD, nD, grD, sgD, prerollD, gsD]
    -- tData = L.concat [padding, headers]
    tData = padding

    sD = le32Fill s
    nD = le32Fill n
    grD = L.concat $ map le64Fill [numerator gr, denominator gr]
    sgD = le64Fill sg
    prerollD = le32Fill preroll
    gsD = u8Fill gs

    padding = L.concat $ map u8Fill [z, z, z]
